// <auto-generated />
using System;
using DataAccess.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.EFCore.Migrations
{
    [DbContext(typeof(WebBlogDbContext))]
    [Migration("20241219121342_MigrationV2")]
    partial class MigrationV2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shared.Entities.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Author");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("EditedAt");

                    b.Property<int?>("FkCategory")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(5000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("FkCategory");

                    b.ToTable("BlogEntries", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int")
                        .HasColumnName("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("CategoryEntries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Exploring new destinations, cultures, and experiences around the world.",
                            Name = "Travel"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Special occasions and celebrations, often marked by leisure and joy.",
                            Name = "Holiday"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Everything about cars, from models and features to maintenance and reviews.",
                            Name = "Car"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Topics about skincare, makeup, fashion, and enhancing personal appearance.",
                            Name = "Beauty"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Insights and details about nations, their cultures, and landmarks.",
                            Name = "Country"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Adventures in nature, including trails, mountains, and outdoor exploration.",
                            Name = "Hiking"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Activities and competitions that involve physical effort and skill.",
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Reflections and insights on everyday living and personal experiences.",
                            Name = "Life"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Learning opportunities, academic subjects, and personal growth.",
                            Name = "Education"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Milestones and accomplishments in personal or professional life.",
                            Name = "Achievement"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Narratives and accounts of experiences, real or fictional.",
                            Name = "Story"
                        });
                });

            modelBuilder.Entity("Shared.Entities.Blog", b =>
                {
                    b.HasOne("Shared.Entities.Category", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("FkCategory");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Shared.Entities.Category", b =>
                {
                    b.Navigation("Blogs");
                });
#pragma warning restore 612, 618
        }
    }
}
